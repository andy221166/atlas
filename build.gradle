plugins {
	id 'java'
	id 'java-library'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'idea'
}

ext {
	set('springBootVersion', '3.4.0')
	set('springCloudVersion', '2024.0.0')

	def stack = project.hasProperty('stack') ? project.getProperty('stack') : 'local-compose'

	loadStackConfig = {
		def configFile = new File("config/stack/${stack}.cfg")
		if (!configFile.exists()) {
			throw new GradleException("Config file not found for stack: ${configFile.absolutePath}")
		}
		def modules = [:]
		configFile.eachLine { line ->
			line = line.trim()
			if (line && !line.startsWith('#')) { // Skip empty lines and comments
				def (key, value) = line.split('=').collect { it.trim() }
				modules[key] = value
			}
		}
		return modules
	}
}

subprojects {
	group = 'org.atlas'
	version = '0.0.1-SNAPSHOT'

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'idea'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_17 as String)
		}
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		implementation('org.springframework.boot:spring-boot-starter') {
			exclude group: 'commons-logging', module: 'commons-logging'
		}
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
	}

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		}
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	idea {
		module {
			downloadJavadoc = true
			downloadSources = true
		}
	}
}
