apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-username: cm9vdA==
  mysql-password: cm9vdA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init
data:
  01_db_user.sql: |
    CREATE DATABASE IF NOT EXISTS db_user;

    USE db_user;

    CREATE TABLE IF NOT EXISTS users
    (
        id           INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        username     VARCHAR(255)   NOT NULL,
        password     VARCHAR(255)   NOT NULL,
        role         VARCHAR(50)    NOT NULL,
        first_name   VARCHAR(255)   NOT NULL,
        last_name    VARCHAR(255)   NOT NULL,
        email        VARCHAR(255)   NOT NULL,
        phone_number VARCHAR(20)    NOT NULL,
        created_at   DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_username (username),
        UNIQUE INDEX idx_email (email)
    ) ENGINE = INNODB;

    -- Password: Aa@123456
    INSERT INTO users (id, username, password, role, first_name, last_name, email, phone_number)
    VALUES
        (1, 'admin', '$2a$12$JBXIjeVKldJZ0824t5ULHOLeoq330xmpx0Ua/5Ipz4hlGxlSm9nE2', 'ADMIN', 'John', 'Doe', 'admin@atlas.org', '0987654321'),
        (2, 'customer', '$2a$12$JBXIjeVKldJZ0824t5ULHOLeoq330xmpx0Ua/5Ipz4hlGxlSm9nE2', 'CUSTOMER', 'John', 'Smith', 'user@atlas.org', '0987321654');

    CREATE TABLE IF NOT EXISTS customer
    (
        user_id      INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        credit       DECIMAL(11, 2) NOT NULL DEFAULT 0,
        created_at   DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

    INSERT INTO customer (user_id, credit)
    VALUES (2, 1000000);

    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id           BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event_type   VARCHAR(255)  NOT NULL,
        payload      TEXT          NOT NULL,
        status       VARCHAR(10)   NOT NULL,
        processed_at DATETIME,
        error        TEXT,
        retries      TINYINT                DEFAULT 0,
        created_at   DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  02_db_product.sql: |
    CREATE DATABASE IF NOT EXISTS db_product;

    USE db_product;

    CREATE TABLE IF NOT EXISTS category
    (
        `id`         INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
        `name`       VARCHAR(255) NOT NULL,
        `created_at` DATETIME     NOT NULL DEFAULT CURRENT_TIMESTAMP,
        `updated_at` DATETIME              DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=INNODB;

    CREATE TABLE IF NOT EXISTS product
    (
        `id`          INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
        `name`        VARCHAR(255)  NOT NULL,
        `description` TEXT,
        `category_id` INT NOT NULL,
        `price`       DECIMAL(9, 2) NOT NULL,
        `quantity`    INT           NOT NULL,
        `created_at`  DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        `updated_at`  DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

    INSERT IGNORE INTO category (`id`, `name`)
    VALUES (1, 'ELECTRONICS'), (2, 'CLOTHING'), (3, 'FOOD'), (4, 'TOYS');

    INSERT IGNORE INTO product (`id`, `name`, `description`, `category_id`, `price`, `quantity`, `created_at`)
    VALUES
    (1, 'Smartphone', 'A modern smartphone with high-speed performance.', 1, 599.99, 100, '2023-01-15 00:00:00'),
    (2, 'Jeans', 'Comfortable blue jeans.', 2, 49.99, 100, '2023-02-20 01:00:00'),
    (3, 'Dark Chocolate', 'Rich dark chocolate bar.', 3, 1.99, 100, '2023-03-01 02:05:00'),
    (4, 'Action Figure', 'A collectible action figure.', 4, 15.99, 0, '2023-04-10 03:10:00'),
    (5, 'Laptop', 'High-end laptop for work and gaming.', 1, 1200.00, 100, '2023-05-25 04:15:00'),
    (6, 'T-Shirt', 'Cotton t-shirt in various sizes.', 2, 20.99, 100, '2023-06-15 05:20:00'),
    (7, 'Milk Chocolate', 'Smooth milk chocolate bar.', 3, 3.49, 100, '2023-07-05 06:25:00'),
    (8, 'Board Game', 'Family-friendly board game.', 4, 29.99, 100, '2023-08-20 07:30:00'),
    (9, 'Electric Kettle', 'Fast boiling electric kettle.', 1, 35.99, 0, '2023-09-10 08:35:00'),
    (10, 'Running Shoes', 'Lightweight running shoes.', 2, 89.99, 100, '2023-10-05 09:40:00');

    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id           BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event_type   VARCHAR(255)  NOT NULL,
        payload      TEXT          NOT NULL,
        status       VARCHAR(10)   NOT NULL,
        processed_at DATETIME,
        error        TEXT,
        retries      TINYINT                DEFAULT 0,
        created_at   DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  03_db_order.sql: |
    CREATE DATABASE IF NOT EXISTS db_order;

    USE db_order;

    CREATE TABLE IF NOT EXISTS orders
    (
        id              INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        user_id         INT            NOT NULL,
        amount          DECIMAL(11, 2) NOT NULL,
        status          VARCHAR(20)    NOT NULL,
        canceled_reason VARCHAR(255),
        created_at      DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at      DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_user_id (user_id)
    ) ENGINE = INNODB;

    CREATE TABLE IF NOT EXISTS order_item
    (
        id            INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
        order_id      INT           NOT NULL,
        product_id    INT           NOT NULL,
        product_price DECIMAL(9, 2) NOT NULL,
        quantity      INT           NOT NULL,
        created_at      DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at      DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_order_id (order_id)
    ) ENGINE = INNODB;

    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id           BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event_type   VARCHAR(255)  NOT NULL,
        payload      TEXT          NOT NULL,
        status       VARCHAR(10)   NOT NULL,
        processed_at DATETIME,
        error        TEXT,
        retries      TINYINT                DEFAULT 0,
        created_at   DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  04_db_notification.sql: |
    CREATE DATABASE IF NOT EXISTS db_notification;

    USE db_notification;

    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id           BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event_type   VARCHAR(255)  NOT NULL,
        payload      TEXT          NOT NULL,
        status       VARCHAR(10)   NOT NULL,
        processed_at DATETIME,
        error        TEXT,
        retries      TINYINT                DEFAULT 0,
        created_at   DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  05_db_report.sql: |
    CREATE DATABASE IF NOT EXISTS db_report;

    USE db_report;

    CREATE TABLE IF NOT EXISTS orders
    (
        id           INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        user_id      INT            NOT NULL,
        first_name   VARCHAR(255)   NOT NULL,
        last_name    VARCHAR(255)   NOT NULL,
        amount       DECIMAL(11, 2) NOT NULL,
        created_at DATETIME         NOT NULL
    ) ENGINE = INNODB;

    CREATE TABLE IF NOT EXISTS order_item
    (
        id            INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
        order_id      INT           NOT NULL,
        product_id    INT           NOT NULL,
        product_name  VARCHAR(255)  NOT NULL,
        product_price DECIMAL(9, 2) NOT NULL,
        quantity      INT           NOT NULL
    ) ENGINE = INNODB;

    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id           BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event_type   VARCHAR(255)  NOT NULL,
        payload      TEXT          NOT NULL,
        status       VARCHAR(10)   NOT NULL,
        processed_at DATETIME,
        error        TEXT,
        retries      TINYINT                DEFAULT 0,
        created_at   DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  06_db_zipkin.sql: |
    CREATE DATABASE IF NOT EXISTS db_zipkin;
    
    USE db_zipkin;
    
    CREATE TABLE IF NOT EXISTS zipkin_spans
    (
        `trace_id_high`       BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
        `trace_id`            BIGINT       NOT NULL,
        `id`                  BIGINT       NOT NULL,
        `name`                VARCHAR(255) NOT NULL,
        `remote_service_name` VARCHAR(255),
        `parent_id`           BIGINT,
        `debug`               BIT(1),
        `start_ts`            BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
        `duration`            BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',
        PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;
    
    ALTER TABLE zipkin_spans
        ADD INDEX (`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';
    ALTER TABLE zipkin_spans
        ADD INDEX (`name`) COMMENT 'for getTraces and getSpanNames';
    ALTER TABLE zipkin_spans
        ADD INDEX (`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';
    ALTER TABLE zipkin_spans
        ADD INDEX (`start_ts`) COMMENT 'for getTraces ordering and range';
    
    CREATE TABLE IF NOT EXISTS zipkin_annotations
    (
        `trace_id_high`         BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
        `trace_id`              BIGINT       NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
        `span_id`               BIGINT       NOT NULL COMMENT 'coincides with zipkin_spans.id',
        `a_key`                 VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
        `a_value`               BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
        `a_type`                INT          NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
        `a_timestamp`           BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
        `endpoint_ipv4`         INT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_ipv6`         BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
        `endpoint_port`         SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;
    
    ALTER TABLE zipkin_annotations
        ADD UNIQUE KEY (`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`a_type`) COMMENT 'for getTraces and autocomplete values';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`a_key`) COMMENT 'for getTraces and autocomplete values';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';
    
    CREATE TABLE IF NOT EXISTS zipkin_dependencies
    (
        `day`         DATE         NOT NULL,
        `parent`      VARCHAR(255) NOT NULL,
        `child`       VARCHAR(255) NOT NULL,
        `call_count`  BIGINT,
        `error_count` BIGINT,
        PRIMARY KEY (`day`, `parent`, `child`)
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;

  07_db_quartz.sql: |
    CREATE DATABASE IF NOT EXISTS db_quartz CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

    USE db_quartz;

    DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
    DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
    DROP TABLE IF EXISTS QRTZ_LOCKS;
    DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_TRIGGERS;
    DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
    DROP TABLE IF EXISTS QRTZ_CALENDARS;

    CREATE TABLE QRTZ_JOB_DETAILS(
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME VARCHAR(250) NOT NULL,
    IS_DURABLE BOOLEAN NOT NULL,
    IS_NONCONCURRENT BOOLEAN NOT NULL,
    IS_UPDATE_DATA BOOLEAN NOT NULL,
    REQUESTS_RECOVERY BOOLEAN NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT(19) NULL,
    PREV_FIRE_TIME BIGINT(19) NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(19) NOT NULL,
    END_TIME BIGINT(19) NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
    REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(10) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_CRON_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_SIMPROP_TRIGGERS
    (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 BOOLEAN NULL,
    BOOL_PROP_2 BOOLEAN NULL,
    TIME_ZONE_ID VARCHAR(80) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_BLOB_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_CALENDARS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_FIRED_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(140) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT(19) NOT NULL,
    SCHED_TIME BIGINT(19) NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT BOOLEAN NULL,
    REQUESTS_RECOVERY BOOLEAN NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_SCHEDULER_STATE (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(19) NOT NULL,
    CHECKIN_INTERVAL BIGINT(19) NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
    ENGINE=InnoDB;

    CREATE TABLE QRTZ_LOCKS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME,LOCK_NAME))
    ENGINE=InnoDB;

    CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
    CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

    CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
    CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
    CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
    CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
    CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
    CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
    CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
    CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
    CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
    CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

    CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
    CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
    CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
    CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
    CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
    CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

    commit;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql  # Selector should match labels below
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels: # Add labels here to match the selector
        app: mysql      # These labels must match with the selector.matchLabels
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
              protocol: TCP
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: mysql-init
            - mountPath: /var/lib/mysql
              name: mysql-data
          args:
            - --default-authentication-plugin=mysql_native_password
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: mysql-init
          configMap:
            name: mysql-init
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
  clusterIP: None
