plugins {
    id 'java-library'
    id 'org.springframework.boot' version "${springBootPluginVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

group = 'org.atlas'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Domain
    api project(':domain.notification')

    // Infrastructure
    api project(':infrastructure.spring-boot.observability.actuator')
    api project(':infrastructure.spring-boot.bean')
    api project(':infrastructure.spring-boot.config')
    switch (stackConfig['datasource']) {
        case 'mysql':
            api project(':infrastructure.spring-boot.datasource.mysql.adapter.notification')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['datasource']}")
    }
    switch (stackConfig['messaging']) {
        case 'kafka':
            api project(':infrastructure.spring-boot.messaging.kafka.adapter.notification')
            break
        case 'sns':
            api project(':infrastructure.spring-boot.messaging.sns.adapter.notification')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['messaging']}")
    }
    api project(':infrastructure.spring-boot.messaging-handler-decorator')
    switch (stackConfig['notification.email']) {
        case 'spring':
            api project(':infrastructure.spring-boot.notification.email.spring')
            break
        case 'ses':
            api project(':infrastructure.spring-boot.notification.email.ses')
            break
        case 'sendgrid':
            api project(':infrastructure.spring-boot.notification.email.sendgrid')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['email']}")
    }
    switch (stackConfig['observability.logging']) {
        case 'logback':
            api project(':infrastructure.spring-boot.observability.logging.logback')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['logging']}")
    }
    switch (stackConfig['observability.metrics']) {
        case 'cloudwatch':
            api project(':infrastructure.spring-boot.observability.metrics.cloudwatch')
            break
        case 'prometheus':
            api project(':infrastructure.spring-boot.observability.metrics.prometheus')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['tracing']}")
    }
    switch (stackConfig['observability.tracing']) {
        case 'simple':
            api project(':infrastructure.spring-boot.observability.tracing.simple')
            break
        case 'zipkin':
            api project(':infrastructure.spring-boot.observability.tracing.zipkin')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['tracing']}")
    }
    switch (stackConfig['scheduler']) {
        case 'spring':
            api project(':infrastructure.spring-boot.scheduler.spring.adapter.notification')
            break
        case 'quartz':
            api project(':infrastructure.spring-boot.scheduler.quartz.adapter.notification')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['scheduler']}")
    }
    api project(':infrastructure.spring-boot.notification.sse')
    switch (stackConfig['template']) {
        case 'freemarker':
            api project(':infrastructure.spring-boot.template.freemarker')
            break
        case 'thymeleaf':
            api project(':infrastructure.spring-boot.template.thymeleaf')
            break
        default:
            throw new IllegalArgumentException("Unsupported ${stackConfig['template']}")
    }
    api project(':infrastructure.spring-boot.use-case-handler-decorator')
    api project(':infrastructure.spring-boot.notification.websocket')

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
